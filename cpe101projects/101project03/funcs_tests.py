from solver_funcs import *
import unittest

class TestCases(unittest.TestCase):
   def test_check_valid(self):
      puzzle = [[1, 2, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0]]

      cages = [[9,  3, 0,  5,  6],
               [7,  2, 1,  2],
               [10, 3, 3,  8,  13],
               [14, 4, 4,  9,  14, 19],
               [3,  1, 7],
               [8,  3, 10, 11, 16],
               [13, 4, 12, 17, 21, 22],
               [5,  2, 15, 20],
               [6,  3, 18, 23, 24]]

      self.assertTrue(check_valid(puzzle, cages))
  
   def test_check_valid_2(self):
      puzzle = [[0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0]]

      cages = [[9,  3, 0,  5,  6],
               [7,  2, 1,  2],
               [10, 3, 3,  8,  13],
               [14, 4, 4,  9,  14, 19],
               [3,  1, 7],
               [8,  3, 10, 11, 16],
               [13, 4, 12, 17, 21, 22],
               [5,  2, 15, 20],
               [6,  3, 18, 23, 24]]

      self.assertTrue(check_valid(puzzle, cages))
   
   def test_check_valid_3(self):
      puzzle = [[3, 5, 2, 1, 4],
                [5, 1, 3, 4, 2],
		[2, 4, 1, 5, 3],
		[1, 2, 4, 3, 5],
		[4, 3, 5, 2, 1]]
   
      cages = [[9,  3, 0, 5, 6],
               [7,  2, 1, 2],
               [10, 3, 3, 8, 13],
               [14, 4, 4, 9, 14, 19],
               [3, 1, 7],
               [8, 3, 10, 11, 16],
               [13, 4, 12, 17, 21, 22],
               [5, 2, 15, 20],
               [6, 3, 18, 23, 24]]
  
      
      self.assertTrue(check_valid(puzzle, cages))
   
   def test_check_cages_valid(self):
      puzzle = [[2, 1, 4, 3, 5],
                [7, 0, 3, 1, 4],
                [3, 4, 2, 5, 1],
                [1, 3, 5, 4, 2],
                [4, 5, 1, 2, 3]] 
   
      cages = [[7, 2, 0, 5],
               [3, 2, 1, 6],
               [7, 2, 2, 7],
               [8, 2, 3, 4],
               [9, 3, 10, 11, 12],
               [6, 2, 8, 13],
               [5, 2, 9, 14],
               [4, 2, 15, 16],
               [9, 2, 17, 18],
               [10, 3, 20, 21, 22],
               [7, 3, 19, 23, 24]]
             
      self.assertFalse(check_cages_valid(puzzle, cages))

   def test_check_cages_valid_2(self):
      
      puzzle = [[1, 2, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0]]

      cages = [[7, 2, 0, 5],
               [3, 2, 1, 6],
               [7, 2, 2, 7],
               [8, 2, 3, 4],
               [9, 3, 10, 11, 12],
               [6, 2, 8, 13],
               [5, 2, 9, 14],
               [4, 2, 15, 16],
               [9, 2, 17, 18],
               [10, 3, 20, 21, 22],
               [7, 3, 19, 23, 24]]
      self.assertTrue(check_cages_valid(puzzle, cages))
   
   def test_columns_valid(self):
      puzzle = [[2, 1, 4, 3, 5],
                [7, 0, 3, 1, 4],
                [3, 4, 2, 5, 1],
                [1, 3, 5, 4, 2],
                [1, 5, 1, 2, 3]]

      cages = [[7, 2, 0, 5],
               [3, 2, 1, 6],
               [7, 2, 2, 7],
               [8, 2, 3, 4],
               [9, 3, 10, 11, 12],
               [6, 2, 8, 13],
               [5, 2, 9, 14],
               [4, 2, 15, 16],
               [9, 2, 17, 18],
               [10, 3, 20, 21, 22],
               [7, 3, 19, 23, 24]]

      self.assertFalse(check_columns_valid(puzzle))
 
   def test_columns_valid_2(self):
      puzzle = [[2, 1, 4, 3, 5],
                [5, 2, 3, 1, 4],
                [3, 4, 2, 5, 1],
                [1, 3, 5, 4, 2],
                [4, 5, 1, 2, 3]]

      cages = [[7, 2, 0, 5],
               [3, 2, 1, 6],
               [7, 2, 2, 7],
               [8, 2, 3, 4],
               [9, 3, 10, 11, 12],
               [6, 2, 8, 13],
               [5, 2, 9, 14],
               [4, 2, 15, 16],
               [9, 2, 17, 18],
               [10, 3, 20, 21, 22],
               [7, 3, 19, 23, 24]]
      self.assertTrue(check_columns_valid(puzzle))

   def test_rows_valid(self):
      puzzle = [[2, 1, 4, 3, 5],
                [7, 0, 3, 1, 4],
                [3, 4, 2, 2, 1],
                [1, 3, 5, 4, 2],
                [4, 5, 1, 2, 3]]

      cages = [[7, 2, 0, 5],
               [3, 2, 1, 6],
               [7, 2, 2, 7],
               [8, 2, 3, 4],
               [9, 3, 10, 11, 12],
               [6, 2, 8, 13],
               [5, 2, 9, 14],
               [4, 2, 15, 16],
               [9, 2, 17, 18],
               [10, 3, 20, 21, 22],
               [7, 3, 19, 23, 24]]
      self.assertFalse(check_rows_valid(puzzle))
   def test_rows_valid_2(self):
      puzzle = [[2, 1, 4, 3, 5],
                [5, 2, 3, 1, 4],
                [3, 4, 2, 5, 1],
                [1, 3, 5, 4, 2],
                [4, 5, 1, 2, 3]]

      cages = [[7, 2, 0, 5],
               [3, 2, 1, 6],
               [7, 2, 2, 7],
               [8, 2, 3, 4],
               [9, 3, 10, 11, 12],
               [6, 2, 8, 13],
               [5, 2, 9, 14],
               [4, 2, 15, 16],
               [9, 2, 17, 18],
               [10, 3, 20, 21, 22],
               [7, 3, 19, 23, 24]]
     
      self.assertTrue(check_rows_valid(puzzle)) 

   def test_one_cage_valid(self):
      puzzle = [[2, 1, 4, 3, 5],
                [0, 2, 3, 1, 4],
                [3, 4, 2, 5, 1],
                [1, 3, 5, 4, 2],
                [4, 5, 1, 2, 3]]

      cages = [[7, 2, 0, 5],
               [3, 2, 1, 6],
               [7, 2, 2, 7],
               [8, 2, 3, 4],
               [9, 3, 10, 11, 12],
               [6, 2, 8, 13],
               [5, 2, 9, 14],
               [4, 2, 15, 16],
               [9, 2, 17, 18],
               [10, 3, 20, 21, 22],
               [7, 3, 19, 23, 24]]
      
      index = 0

      self.assertTrue(check_one_cage_valid(puzzle, cages, index))
     
   def test_one_cage_valid_2(self):
      puzzle = [[0, 1, 4, 3, 5],
                [7, 0, 3, 1, 4],
                [3, 4, 2, 5, 1],
                [1, 3, 5, 4, 2],
                [4, 5, 1, 2, 3]]

      cages = [[7, 2, 0, 5],
               [3, 2, 1, 6],
               [7, 2, 2, 7],
               [8, 2, 3, 4],
               [9, 3, 10, 11, 12],
               [6, 2, 8, 13],
               [5, 2, 9, 14],
               [4, 2, 15, 16],
               [9, 2, 17, 18],
               [10, 3, 20, 21, 22],
               [7, 3, 19, 23, 24]]
      
      index = 0

      self.assertFalse(check_one_cage_valid(puzzle, cages, index))
      
   def test_one_cage_valid_3(self):
      puzzle = [[0, 1, 4, 3, 5],
                [7, 0, 3, 1, 4],
                [3, 4, 2, 5, 1],
                [1, 3, 5, 4, 2],
                [4, 5, 1, 2, 3]]

      cages = [[7, 2, 0, 5],
               [3, 2, 1, 6],
               [7, 2, 2, 7],
               [8, 2, 3, 4],
               [9, 3, 10, 11, 12],
               [6, 2, 8, 13],
               [5, 2, 9, 14],
               [4, 2, 15, 16],
               [9, 2, 17, 18],
               [10, 3, 20, 21, 22],
               [7, 3, 19, 23, 24]]

      index = 4

      self.assertTrue(check_one_cage_valid(puzzle, cages, index))

   def test_check_cage_for_zeros(self):
      puzzle = [[0, 1, 4, 3, 5],
                [5, 2, 3, 1, 4],
                [3, 4, 2, 5, 1],
                [1, 3, 5, 4, 2],
                [4, 5, 1, 2, 3]]

      cages = [[7, 2, 0, 5],
               [3, 2, 1, 6],
               [7, 2, 2, 7],
               [8, 2, 3, 4],
               [9, 3, 10, 11, 12],
               [6, 2, 8, 13],
               [5, 2, 9, 14],
               [4, 2, 15, 16],
               [9, 2, 17, 18],
               [10, 3, 20, 21, 22],
               [7, 3, 19, 23, 24]]
      
      indexes = [0, 5]

      self.assertFalse(check_cage_for_zeros(puzzle, cages, indexes))

   def test_check_cage_for_zeros_2(self):
      puzzle = [[0, 1, 4, 3, 5],
                [5, 2, 3, 1, 4],
                [3, 4, 2, 5, 1],
                [1, 3, 5, 4, 2],
                [4, 5, 1, 2, 3]]

      cages = [[7, 2, 0, 5],
               [3, 2, 1, 6],
               [7, 2, 2, 7],
               [8, 2, 3, 4],
               [9, 3, 10, 11, 12],
               [6, 2, 8, 13],
               [5, 2, 9, 14],
               [4, 2, 15, 16],
               [9, 2, 17, 18],
               [10, 3, 20, 21, 22],
               [7, 3, 19, 23, 24]]
      
      indexes = [1, 6]

      self.assertTrue(check_cage_for_zeros(puzzle, cages, indexes))

   def test_check_cage_for_zeros_3(self):
      puzzle = [[2, 1, 4, 3, 5],
                [5, 2, 3, 1, 4],
                [3, 4, 2, 5, 1],
                [1, 3, 5, 4, 2],
                [4, 5, 1, 2, 3]]

      cages = [[7, 2, 0, 5],
               [3, 2, 1, 6],
               [7, 2, 2, 7],
               [8, 2, 3, 4],
               [9, 3, 10, 11, 12],
               [6, 2, 8, 13],
               [5, 2, 9, 14],
               [4, 2, 15, 16],
               [9, 2, 17, 18],
               [10, 3, 20, 21, 22],
               [7, 3, 19, 23, 24]]

      indexes = [0, 5]

      self.assertTrue(check_cage_for_zeros(puzzle, cages, indexes))


if __name__ == '__main__':
   unittest.main()
